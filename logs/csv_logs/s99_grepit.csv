Grepit test;Number of results;Used args for grep;Regex used;Grepit comment;
5_c_malloc;6;;malloc\(;malloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.;
5_cryptocred_ciphers_rc2;5;-i;RC2;RC2 cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_rc4;17;;RC4;RC4 cipher. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_crc32;11;-i;CRC32;CRC32 is a checksum algorithm. Security depends heavily on usage and what is secured.;
7_cryptocred_ciphers_des;67;;DES;DES cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_md2;5;;MD2;MD2. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_md5;102;;MD5;MD5. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha1_uppercase;30;;SHA-?1;SHA1. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha1_lowercase;17;;sha-?1;SHA1. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha256;17;-i;SHA-?256;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_hmac;47;-i;HMAC;HMAC. Security depends heavily on usage and what is secured.;
3_dotnet_unsafe_declaration;5;;unsafe\s;If you declare a variable 'unsafe' in .NET you can do pointer arythmetic and therefore introduce buffer overflows etc. again;
4_dotnet_marshal;11;;Marshal;If you use Marshal in .NET you use an unsafe API and therefore you could introduce buffer overflows etc. again.;
4_cryptocred_ciphers_kerberos;24;-i;kerberos;Kerberos. Security depends heavily on usage and what is secured.;
4_dotnet_unchecked;11;;unchecked;unchecked allows to disable exceptions for integer overflows, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs;
6_cryptocred_hash;340;-i;hash(?!(table|map|set|code));Hash;
1_cryptocred_passwd_or_shadow_files;32;-i;[^:]{3,20}:[^:]{1,200}:\d{0,20}:\d{0,20}:[^:]{0,200}:[^:]{0,200}:[^:]*$;Find *nix passwd or shadow files.;
2_cryptocred_encryption_key;29;-i;encrypt.{0,20}key;Encryption key and variants of it;
4_cryptocred_dev_random;39;;/dev/u?random;Sources of entropy: /dev/random and /dev/urandom;
5_cryptocred_certificates_and_keys_wide_private-key;11;-i;PRIVATE.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_public-key;5;-i;PUBLIC.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
2_cryptocred_default_password;11;-i;default.?password;Default password;
4_cryptocred_password;1096;-i;pass.?wo?r?d;Password and variants of it;
2_general_html_templating;23;;<%=;A generic templating pattern that is used in HTML generation of Java (JSP), Ruby and client-side JavaScript libraries.;
5_cryptocred_pwd_uppercase;71;;PWD;PWD abbrevation for password;
5_cryptocred_pwd_lowercase;277;;pwd;pwd abbrevation for password;
5_general_deny;77;;[Dd]eny;Denying is often used for filtering, etc.;
4_general_exec_narrow;11;;exec\s{0,20}\(;Exec mostly means executing on OS.;
5_cryptocred_pwd_capitalcase;123;;Pwd;Pwd abbrevation for password;
2_cryptocred_adduser2;8;;adduser ;Adding a new user in bash scripts. Often found in bad-practice bash scripts or log files.;
5_general_exec_wide;298;;exec;Exec mostly means executing on OS.;
5_general_eval_wide;87;;eval;Eval mostly means evaluating commands.;
5_cryptocred_credentials_wide;23;-i;creden;Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.;
5_general_syscall_wide;50;-i;sys.?call;Syscall: Command execution?;
4_general_system_narrow;35;-i;system\s{0,20}\(;system: Command execution?;
5_cryptocred_passphrase_wide;47;-i;pass.?phrase;Passphrase and variants of it;
2_cryptocred_secret_narrow;35;-i;se?3?cre?3?t.{0,20}=.?["'\d];Secret and variants of it;
5_cryptocred_secret_wide;323;-i;se?3?cre?3?t;Secret and variants of it;
5_cryptocred_pin_code_wide;33;-i;pin.?code;PIN code and variants of it;
5_general_system_wide;1028;-i;system;system: Command execution?;
5_cryptocred_authorization;56;-i;Authori[sz]ation;Authorization;
5_cryptocred_authentication;319;-i;Authentication;Authentication;
4_cryptocred_ssl_usage_require-ssl;14;-i;require.{0,20}SSL;SSL usage with requireSSL;
3_general_tmp_dir;11;;["']/tmp/;Search for binary paths or similar: Command execution?;
4_cryptocred_ssl_usage_use-ssl;5;-i;use.{0,20}SSL;SSL usage with useSSL;
3_general_proc_dir;5;;["']/proc/;Reading values from /proc/;
5_general_popen_wide;16;-i;popen;popen: Command execution?;
5_general_spawn_wide;41;-i;spawn;spawn: Command execution?;
5_general_chown;81;-i;chown;chown: Change owner command;
5_general_chmod;115;-i;chmod;chmod: Change mode (permissions) command;
4_general_session_timeout;23;-i;session-?\s?time-?\s?out;Session timeouts should be reasonable short for things like sessions for web logins but can also lead to denial of service conditions in other cases.;
5_html_upload_form_tag;599;-i;multipart/form-data;HTML upload.;
5_html_upload_input_tag;11;-i;type=.?file;HTML upload form.;
5_general_session_timeout;989;-i;time-?\s?out;Timeout. Whatever timeout this might be, that might be interesting.;
5_html_application_octet-stream;29;-i;application/octet-stream;application/octet-stream is subject to content sniffing in some browsers.;
5_html_text_plain;17;-i;text/plain;text/plain is subject to content sniffing in some browsers.;
5_general_relative_paths;746;-i;\./;Relative paths. May allow an attacker to put something early in the search path (if parts are user supplied input) and overwrite behavior;
6_general_update;619;-i;update;Update code and general update strategy weaknesses;
6_general_backup;57;-i;backup;Backup code and general backup strategy weaknesses;
5_general_kernel;733;-i;Kernel;Kernel. A reference to something low level in a Kernel?;
6_general_email;196;-i;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b;Email addresses;
5_general_todo_capital_and_lower;5;;[Tt]odo;TODOs, unfinished and insecure things?;
5_general_todo_uppercase;4;;TODO;TODOs, unfinished and insecure things?;
6_general_workaround;5;-i;workaround;Workarounds, maybe they work around security?;
5_general_hack;16;-i;hack;Hack. Developers sometimes hack something around security.;
5_general_trick;2;-i;trick;Trick. Sounds suspicious.;
5_general_bypass;5;-i;bypass;Bypass. Sounds suspicious, what do they bypass exactly?;
5_general_fake;31;-i;fake;Fake. Sounds suspicious.;
2_general_uris_auth_info_wide;1774;-i;[^ \:/]{1,20}:[^ \:/]{1,20}@;URIs with authentication information specified as username:password@example.org;
6_ios_string_format_format_wide;5;;format:;iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_ios_string_format_format_narrow;5;;format:[^@];iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_general_http_urls;353;-i;http://;All HTTP URIs;
4_general_non_ssl_uris_file;5;-i;file://;file URIs;
5_general_hidden;444;-i;hidden;Hidden things, for example hidden HTML fields;
7_general_scheme;22;-i;scheme;Scheme. Is the first part of a URI aka 'the protocol'.;
7_general_schema;244;-i;schema;Schema. Eg. a database schema.;
4_general_directory_listing;5;-i;directory.listing;Directory listing, usually a bad idea in web servers.;
4_general_xss_lowercase;5;;xss;XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_hacking_techniques_buffer-overflow;63;-i;buffer.{0,20}overflow;Buffer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_hacking_techniques_integer-overflow;5;-i;integer.{0,20}overflow;Integer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
4_general_sql_select;115;-i;SELECT\s.{0,200}FROM;SQL SELECT statement;
4_general_sql_insert;5;-i;INSERT.{0,20}INTO;SQL INSERT statement;
5_general_sql_cursor;17;-i;cursor;SQL cursor?;
5_general_base64_content;1126;;(?:[A-Za-z0-9+/]{4}){2,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=);Base64 encoded data (that is more than 6 bytes long). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
5_general_base64_urlsafe;2732;;(?:[A-Za-z0-9_-]{4}){2,}(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=);Base64 URL-safe encoded data (that is more than 6 bytes long). To get from URL-safe base64 to regular base64 you need .replace('-','+').replace('_','/'). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
5_general_base64_word;120;-i;base64;Base64 as a word used;
4_general_swear_shit;17;-i;shit;Shit and bullshit: Swear words are often used when things don't work as intended by the developer.;
8_general_ip-addresses;933;-i;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?);IP addresses;
6_general_referer;23;-i;referer;Referer is only used for the HTTP Referer usually, it can be specified by the attacker;
4_general_sqli_generic;11;-i;from\s.{0,200}\swhere\s.{0,200};Generic search for SQL injection, FROM and WHERE being SQL keywords and + meaning string concatenation;
4_java_serialization-serialized-data;0;;\\xAC\\xED\\x00\\x05;Java serialized data? Usually Java serialized data in base64 format starts with rO0 or non-base64 with hex ACED0005. Decidezation is something that can result in remote command execution, there are various exploits for such things, see http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/ and https://github.com/mbechler/marshalsec for example;
7_general_sleep_generic;332;-i;sleep;Generic sleep call, if server side this could block thread/process and therefore enable to easily do Denial of Service attacks;
6_java_setAttribute;23;;\.setAttribute\(;setAttribute is usually used to set an attribute of a session object, untrusted data should not be added to a session object;
5_js_dom_xss_location-href;1452;;location\.href;Location href: DOM-based XSS source/sink.;
5_js_dom_xss_location-pathname;93;;location\.pathname;Location pathname: DOM-based XSS source/sink.;
5_js_dom_xss_window-location;53;;window\.location;Window location: DOM-based XSS source/sink.;
5_modsecurity_exec;5;-i;exec:;Possible command injection when executing bash scripts.;
5_modsecurity_append;17;-i;append:;Modsecurity actively changing HTTP response content.;
4_php_proc;112;-i;proc_;Dangerous PHP function: proc_;
5_js_dom_xss_document-write;2066;;document\.writel?n?\(;Document Write and variants of it: DOM-based XSS source/sink.;
5_js_console;11;;console\.;Console should not be logged to in production;
2_js_insecure_JSON_parser;2;;Eaeflnr-u;RFC 4627 includes a parser regex example http://www.ietf.org/rfc/rfc4627.txt and it is insecure as explained in the 'the tangled web' book, as it allows incrementing and decrementing of certain variables.;
6_php_echo_high_volume;483;-i;echo;Methods that often introduce XSS: echo;
5_python_is_object_identity_operator_left;124;;\d\s{1,20}is\s{1,20};The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
6_php_print_high_volume;955;-i;print;Methods that often introduce XSS: print;
5_python_is_object_identity_operator_right;440;;\s{1,20}is\s{1,20}\d;The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_float_equality_general;4736;;\s{1,20}==\s{1,20};The float type can not be reliably compared for equality. Make sure none of these comparisons uses floats, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_shutil_move;17;;move\s{0,20}\(;shutil.move is flawed and silently leaves the old file behind if the source and destination are on different file systems, see https://access.redhat.com/blogs/766093/posts/2592591;
7_php_type_unsafe_comparison;5798;;[^=]==[^=];The big problem with == is that in PHP (and some other languages), this comparison is not type safe. What you should always use is ===. For example a hash value that starts with 0E could be interpreted as an integer if you don't take care. There were real world bugs exploiting this issue already, think login form and comparing the hashed user password, what happens if you type in 0 as the password and brute force different usernames until a user has a hash which starts with 0E? Then there is also the question of different systems handling/doing Unicode Normalization (see for example https://gosecure.github.io/unicode-pentester-cheatsheet/ and https://www.gosecure.net/blog/2020/08/04/unicode-for-security-professionals/) or not: B\xC3\xBCcher and B\x75\xcc\x88cher is both UTF-8, but one is the character for a real Unicode u-Umlaut while the other is u[COMBINING DIAERESIS]. If the backend normalizes it could be that identifiers clash.;
